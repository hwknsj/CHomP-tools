# gsLib.py by Joel Hawkins
# hwknsj@gmail.com, hwknsj@github
#
# A library for running Gray-Scott simulations in python
#
# Thanks to Nicolas P. Rougier (http://www.labri.fr/perso/nrougier/) 
# for great Numpy tutorials

"""
Encode movie
------------
ffmpeg -r 30 -i "./tmp/tmp-%03d.png" -c:v libx264 -crf 23 -pix_fmt yuv420p bacteria.mp4
"""

import numpy as np
import matplotlib.pyplot as plt
import os
from matplotlib.colors import ListedColormap
from sys import stdout
import shlex, subprocess

# Interesting values
# -----------------------------------------------------
# n = 256
# Du, Dv, F, k = 0.16, 0.08, 0.035, 0.065 # Bacteria 1
# Du, Dv, F, k = 0.14, 0.06, 0.035, 0.065 # Bacteria 2
# Du, Dv, F, k = 0.16, 0.08, 0.060, 0.062 # Coral
# Du, Dv, F, k = 0.15, 0.10, 0.05, 0.07
# Du, Dv, F, k = 0.19, 0.05, 0.060, 0.062 # Fingerprint
# Du, Dv, F, k = 0.17, 0.10, 0.018, 0.050 # Chaotic?
# Du, Dv, F, k = 0.15, 0.08, 0.035, 0.05632 # Cool properties
# Du, Dv, F, k = 0.10, 0.10, 0.018, 0.050 # Spirals
# Du, Dv, F, k = 0.12, 0.08, 0.020, 0.050 # Spirals Dense
# Du, Dv, F, k = 0.10, 0.16, 0.020, 0.050 # Spirals Fast
# Du, Dv, F, k = 0.16, 0.08, 0.020, 0.055 # Unstable
# Du, Dv, F, k = 0.16, 0.08, 0.050, 0.065 # Worms 1
# Du, Dv, F, k = 0.16, 0.08, 0.054, 0.063 # Worms 2
# Du, Dv, F, k = 0.16, 0.08, 0.035, 0.060 # Zebrafish
# Du, Dv, F, k = 0.12, 0.06, 0.03, 0.055 # Pearson delta
# Du, Dv, F, k = 0.16, 0.08, 0.021, 0.0515 # cool alpha
# Du, Dv, F, k = 0.16, 0.08, 0.018, 0.0515 # my alpha
"""
Values for F, k as described in
John Pearson's "Complex Patterns in a Simple System" Science, 1993
"""
# Du, Dv, F, k, name = 0.12, 0.06, 0.014, 0.053, "alpha"
# Du, Dv, F, k, name = 0.16, 0.08, 0.014, 0.039, "beta"
# Du, Dv, F, k, name = 0.16, 0.08, 0.022, 0.051, "gamma"
# Du, Dv, F, k, name = 0.1, 0.05, 0.03, 0.055, "delta"
# Du, Dv, F, k, name = 0.14, 0.07, 0.014, 0.055, "epsilon"
# Du, Dv, F, k, name = 0.14, 0.07, 0.029, 0.06, "eta"
# Du, Dv, F, k, name = 0.12, 0.06, 0.03, 0.057, "theta"
# Du, Dv, F, k, name = 0.12, 0.06, 0.046, 0.0594, "iota"
# Du, Dv, F, k, name = 0.16, 0.08, 0.058, 0.063, "kappa"
# Du, Dv, F, k, name = 0.16, 0.08, 0.038, 0.065, "lambda"
# Du, Dv, F, k, name = 0.2, 0.1, 0.060, 0.0650, "mu"
# Du, Dv, F, k, name = 0.14, 0.07, 0.022, 0.061, "zeta"
# Du, Dv, F, k, name = 0.16, 0.08, 0.014, 0.0570, "R"
# Du, Dv, F, k, name = 0.16, 0.08, 0.05, 0.0590, "B"

def runGS(Du, Dv, F, k, name):
	n = 256

	Z = np.zeros((n+2,n+2), [('U', np.double), ('V', np.double)])
	U,V = Z['U'], Z['V']
	u,v = U[1:-1,1:-1], V[1:-1,1:-1]
	r = 20
	u[...] = 1.0
	U[n/2-r:n/2+r,n/2-r:n/2+r] = 0.50
	V[n/2-r:n/2+r,n/2-r:n/2+r] = 0.25
	u += 0.05*np.random.random((n,n))
	v += 0.05*np.random.random((n,n))

	plt.ion()

	size = np.array(Z.shape)
	dpi = 120.0
	figsize= size[1]/float(dpi),size[0]/float(dpi)
	fig = plt.figure(figsize=figsize, dpi=dpi, facecolor="white")
	fig.add_axes([0.0, 0.0, 1.0, 1.0], frameon=False)
	# an alternative colormap
	#C = np.array([[0,24,104],[0,26,104],[0,27,104],[0,29,104],[0,31,105],[0,32,105],[0,34,105],[1,35,105],[1,37,106],[1,39,106],[1,40,106],[1,42,107],[1,44,107],[1,45,107],[1,47,107],[1,49,108],[1,50,108],[1,52,108],[1,54,109],[1,55,109],[1,57,109],[2,59,109],[2,60,110],[2,62,110],[2,64,110],[2,65,111],[2,67,111],[2,68,111],[2,70,111],[2,72,112],[2,73,112],[2,75,112],[2,77,112],[2,78,113],[2,80,113],[3,82,113],[3,83,114],[3,85,114],[3,87,114],[3,88,114],[3,90,115],[3,92,115],[3,93,115],[3,95,116],[3,96,116],[3,98,116],[3,100,116],[3,101,117],[3,103,117],[4,105,117],[4,106,117],[4,108,118],[4,110,118],[4,111,118],[4,113,119],[4,115,119],[4,116,119],[4,118,119],[4,120,120],[4,121,120],[4,123,120],[4,125,121],[5,126,121],[5,128,121],[5,129,121],[8,130,119],[12,131,118],[15,131,117],[18,132,115],[21,133,114],[24,134,112],[27,134,111],[30,135,109],[33,136,108],[36,137,106],[39,138,105],[42,138,103],[46,139,102],[49,140,100],[52,141,99],[55,141,97],[58,142,96],[61,143,94],[64,144,93],[67,144,91],[70,145,90],[73,146,88],[77,147,87],[80,147,85],[83,148,84],[86,149,82],[89,150,81],[92,150,80],[95,151,78],[98,152,77],[101,153,75],[104,153,74],[107,154,72],[111,155,71],[114,156,69],[117,156,68],[120,157,66],[123,158,65],[126,159,63],[129,159,62],[132,160,60],[135,161,59],[138,162,57],[141,162,56],[145,163,54],[148,164,53],[151,165,51],[154,165,50],[157,166,48],[160,167,47],[163,168,46],[166,168,44],[169,169,43],[172,170,41],[175,171,40],[179,171,38],[182,172,37],[185,173,35],[188,174,34],[191,174,32],[194,175,31],[197,176,29],[200,177,28],[202,176,27],[201,175,28],[201,173,28],[201,171,29],[201,170,29],[200,168,30],[200,167,30],[200,165,31],[200,163,31],[199,162,32],[199,160,33],[199,159,33],[199,157,34],[198,156,34],[198,154,35],[198,152,35],[198,151,36],[197,149,36],[197,148,37],[197,146,37],[197,144,38],[196,143,38],[196,141,39],[196,140,39],[196,138,40],[195,136,40],[195,135,41],[195,133,41],[195,132,42],[195,130,42],[194,129,43],[194,127,43],[194,125,44],[194,124,45],[193,122,45],[193,121,46],[193,119,46],[193,117,47],[192,116,47],[192,114,48],[192,113,48],[192,111,49],[191,109,49],[191,108,50],[191,106,50],[191,105,51],[190,103,51],[190,102,52],[190,100,52],[190,98,53],[189,97,53],[189,95,54],[189,94,54],[189,92,55],[188,90,55],[188,89,56],[188,87,56],[188,86,57],[188,84,58],[187,82,58],[187,81,59],[187,79,59],[187,78,60],[186,76,60],[186,75,60],[185,74,59],[184,73,58],[184,72,58],[183,71,57],[182,70,56],[181,69,55],[181,68,55],[180,68,54],[179,67,53],[179,66,53],[178,65,52],[177,64,51],[176,63,50],[176,62,50],[175,61,49],[174,60,48],[174,59,48],[173,58,47],[172,57,46],[171,56,45],[171,55,45],[170,54,44],[169,54,43],[169,53,43],[168,52,42],[167,51,41],[166,50,40],[166,49,40],[165,48,39],[164,47,38],[164,46,38],[163,45,37],[162,44,36],[161,43,35],[161,42,35],[160,41,34],[159,40,33],[159,40,33],[158,39,32],[157,38,31],[156,37,30],[156,36,30],[155,35,29],[154,34,28],[154,33,28],[153,32,27],[152,31,26],[151,30,25],[151,29,25],[150,28,24],[149,27,23],[149,26,23],[148,26,22],[147,25,21],[146,24,20],[146,23,20],[145,22,19],[144,21,18],[143,20,18],[143,19,17],[142,18,16],[141,17,15],[141,16,15]])
	#cmap = ListedColormap(C/255.0)
	cmap = plt.cm.binary
	im = plt.imshow(V, interpolation='bicubic', cmap=cmap)
	plt.xticks([]), plt.yticks([])

	foldername = "./tmp/"+name
	if not os.path.exists(foldername):
		os.makedirs(foldername)
	
	print "Simulating " + name	

	for i in xrange(25000):
		Lu = ( U[0:-2,1:-1] + U[1:-1,0:-2] - 4*U[1:-1,1:-1] + U[1:-1,2:] + U[2:  ,1:-1] )
		Lv = ( V[0:-2,1:-1] + V[1:-1,0:-2] - 4*V[1:-1,1:-1] + V[1:-1,2:] + V[2:  ,1:-1] )

		uvv = u*v*v
		u += (Du*Lu - uvv +  F   *(1-u))
		v += (Dv*Lv + uvv - (F+k)*v    )

		if i % 10 == 0:
			im.set_data(V)
			# To use different color limits
			# im.set_clim(vmin=V.min(), vmax=V.max())
			im.set_clim(vmin=0.0, vmax=0.4)
			# Lines below print the min and max in the shell
			# stdout.write("\r vmin="+str(V.min())+", vmax="+str(V.max()) )
			# stdout.flush()
			plt.draw()
			# To save files to make movie
			# plt.savefig(foldername + "/" + name + "-%04d.png" % (i/10) ,dpi=dpi)
	
	stdout.write("\n")	
	plt.ioff()
	plt.close()
	print name + " is done..."